import java.util.stream.Collectors

group ''
version '0.19.0'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'org.intellimate.izou.Main'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.intellimate.izou:sdk:[0.5.0,1.0.0]'
    compile 'commons-lang:commons-lang:2.+'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}



def String projectName = ;
def String pluginClass = ;
def String provider = ;
def List<String> dependencies = [];
def String serverId = ;

jar {
    baseName = projectName
    manifest {
        attributes 'Plugin-Class' : pluginClass,
                'Plugin-Id' : group + "." + project.name,
                'Plugin-Version' : project.version,
                'Plugin-Provider' : provider,
                'Plugin-Dependencies' : dependencies.stream().collect(Collectors.joining(",")),
                'Server-ID': serverId,
                'SDK-Version' : project.version,
                'Artifact-ID' : project.name
    }
}

task plugin(type: Zip) {
    baseName = project.name
    version = project.version
    def allExcluded = [];
    doFirst {
        def excluded = ["org.intellimate.izou"];
        excluded.addAll(dependencies);
        def recursiveAdd
        recursiveAdd = { dep ->
            allExcluded.add("${dep.module.id.name}-${dep.module.id.version}.jar".toString())
            dep.children.each { childResolvedDep ->
                if(dep in childResolvedDep.getParents() && childResolvedDep.getConfiguration() == 'compile'){
                    recursiveAdd(childResolvedDep);
                }
            }
        }

        configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
            if (excluded.contains(dep.module.id.group)) {
                recursiveAdd(dep)
            }
        }
    }
    from (configurations.compile) {
        into ('lib/')
        exclude { allExcluded.contains(it.file.name) }
        exclude(allExcluded)
    }
    from (sourceSets.main.output.classesDir) {
        into ('classes/')
    }
    from (sourceSets.main.resources) {
        into ('classes/')
    }
    from (new File(project.buildDir, 'tmp/jar/')) {
        into ('classes/META-INF/')
    }
}

plugin.dependsOn jar